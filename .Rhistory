<<<<<<< HEAD
=======
<<<<<<< HEAD
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1",
| country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarise(by_package, size = mean(size))
summarise(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count()))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
print
submit()
submit()
=======
X[(X$var1 <= 3 | X$var3 > 12), ]
X[(X$var2 > 8), ]
X[which(X$var2 > 8), ]
sort(X$var1)
set.seed(13435)
X <- data.frame("var1" = sample(1:5), "var2" = sample(6:10), "var3" = sample(11:15))
X <- X[sample(1:5), ]; X$var2[c(1, 3)] = NA
X
X[, 1]
>>>>>>> abea784d2be924da03eba99c5b9ad57d3ceef8be
X[, "var1"]
X[1:2, "var2"]
X[(X$var1 <= 3 & X$var3 > 11), ]
X[(X$var1 <= 3 | X$var3 > 12), ]
X[which(X$var2 > 8), ]
sort(X$var1)
sort(X$var1, decreasing = TRUE)
sort(X$var2, na.last = TRUE)
sort(X$var1)
# sort(X$var1, decreasing = TRUE)
# sort(X$var2, na.last = TRUE)
X
# sort(X$var1)
# sort(X$var1, decreasing = TRUE)
# sort(X$var2, na.last = TRUE)
set.seed(13435)
X <- data.frame("var1" = sample(1:5), "var2" = sample(6:10), "var3" = sample(11:15))
X <- X[sample(1:5), ]; X$var2[c(1, 3)] = NA
X
rm(list = ls())
set.seed(13435)
X <- data.frame("var1" = sample(1:5), "var2" = sample(6:10), "var3" = sample(11:15))
X <- X[sample(1:5), ]; X$var2[c(1, 3)] = NA
X
X
# sort(X$var1)
# sort(X$var1, decreasing = TRUE)
# sort(X$var2, na.last = TRUE)
X[, 1]
set.seed(13435)
X <- data.frame("var1" = sample(1:5), "var2" = sample(6:10), "var3" = sample(11:15))
X <- X[sample(1:5), ]; X$var2[c(1, 3)] = NA
X
X[, 1]
set.seed(13435)
X <- data.frame("var1" = sample(1:5), "var2" = sample(6:10), "var3" = sample(11:15))
X <- X[sample(1:5), ]; X$var2[c(1, 3)] = NA
X
X[, 1]
X[, "var1"]
X[1:2, "var2"]
X[(X$var1 <= 3 & X$var3 > 11), ]
X[(X$var1 <= 3 | X$var3 > 12), ]
X[which(X$var2 > 8), ]
X
# sort(X$var1)
# sort(X$var1, decreasing = TRUE)
# sort(X$var2, na.last = TRUE)
sort(X$var1)
# sort(X$var1, decreasing = TRUE)
# sort(X$var2, na.last = TRUE)
sort(X$var1)
sort(X$var1, decreasing = TRUE)
# sort(X$var2, na.last = TRUE)
sort(X$var1)
sort(X$var1, decreasing = TRUE)
sort(X$var2, na.last = TRUE)
X[order(X$var1), ]
X[order(X$var1, X$var3), ]
library(plyr)
install.packages("plyr")
library(plyr)
arrange(X, var1)
arrange(X, desc(var1))
X$var4 <- rnorm(5)
X
Y <- cbind(X, rnorm(5))
Y
z <- cbind(rnorm(5), Y)
z
v <- rnorm(5)
A <- cbind(z, v)
A
Z <- rbind(Y, rnorm(5))
Z
rm(list = ls())
setwd("C:/Users/CORMAAL/Desktop/DSEF/DS_Specialisation/03_Getting_And_Cleaning_Data/code")
restData <- read.csv("./data/Restaurants.csv")
restData <- read.csv("./data/Restaurants.csv")
head(restData, 3)
tail(restData, 3)
tail(restData, 3)
head(restData, 3)
summary(restData)
str(restData)
quantile(restData$cncldstn, na.rm = TRUE)
quantile(restData$cncldstn, na.rm = FALSE)
?na.rm
quantile(restData$cncldst, na.rm = TRUE)
quantile(restData$cncldst, na.rm = TRUE, probs = c(0.5, 0.75, 0.9))
table(restData$zipcode, useNA = "ifany")
?table
table(restData$zipcode, useNA = "no")
table(restData$zipcode, useNA = "always")
table(restData$zipcode, useNA = "ifany")
table(restData$cncldst, restData$zipcode)
sum(is.na(restData$cncldst))
any(is.na(restData$cncldst))
all(restData$zipcode > 0)
restData <- read.csv("./data/Restaurants.csv")
summary(restData)
str(restData)
table(restData$zipcode, useNA = "ifany")
table(restData$cncldst, restData$zipcode)
all(restData$zipcode > 0)
colSums(is.na(restData))
all(colSums(restData) == 0)
all(colSums(is.na(restData) == 0)
all(colSums(is.na(restData) == 0))
all(colSums(is.na(restData)) == 0)
View(restData)
table(restData$zipcode %in% c("21212"))
table(restData$zipcode == c("21212"))
table(restData$zipcode %in% c("21212", "21213"))
table(restData$zipcode == "21212")
table(restData$zipcode == 21212)
table(restData$zipcode %in% c(21212, 21213))
restData[restData$zipcode %in% c(21212, 21213), c("name", "zipcode")]
summary(DF)
data("UCBAdmissions")
DF <- as.data.frame(UCBAdmissions)
summary(DF)
xt <- xtabs(Freq ~ Gender + Admit, data=DF)
xt
warpbreaks$replicate <- rep(1:9, len = 54)
xt <- xtabs(breaks ~ ., data = warpbreaks)
xt
ftable(xt)
object.size(fakeData)
fakeData = rnorm(1e5)
fakeData = rnorm(1e5)
object.size(fakeData)
print(object.size(fakeData), units = "Mb")
rm(list = ls())
restData <- read.csv("./data/Restaurants.csv")
restData <- read.csv("./data/Restaurants.csv")
s1 <- seq(1, 10, by = 2)
s1
s2
s2 <- seq(1, 10, length = 3)
s2
s2 <- seq(1, 10, length = 4)
s2
x <- c(1, 3, 8, 25, 100)
seq(along = x)
str(restData)
restData$nearMe <- restData$nghbrhd %in% c("Roland Park", "Homeland")
table(restData$nearMe)
restData$zipGroups <- cut(restData$zipcode, breaks = quantile(restData$zipcode))
table(restData$zipGroups
restData$zipGroups <- cut(restData$zipcode, breaks = quantile(restData$zipcode))
table(restData$zipGroups)
table(restData$zipGroups, restData$zipcode)
library(Hmisc)
restData$zipGroups <- cut2(restData$zipcode, g = 4)
table(restData$zipGroups)
library(Hmisc)
restData$zipGroups <- cut2(restData$zipcode, g = 4)
table(restData$zipGroups)
library(Hmisc)
library(plyr)
restData2 <- mutate(restData, zipGroups = cut2(zipcode, g = 4))
table(restData2$zipGroups)
library(Hmisc)
library(plyr)
restData2 <- mutate(restData, zipGroups = cut2(zipcode, g = 4))
table(restData2$zipGroups)
rm(list = ls())
install.packages("foreign")
library(foreign)
data <- read.fwf("./data/getdata_wksst8110.for", widths = c(-28, 4))
setwd("C:/Users/CORMAAL/Desktop/DSEF/DS_Specialisation/03_Getting_And_Cleaning_Data/code")
data <- read.fwf("./data/getdata_wksst8110.for", widths = c(-28, 4))
str(data)
summary(data)
head(data)
library(dplyr)
data <- read.fwf("./data/getdata_wksst8110.for", widths = c(-1, 9, -5, 4, 4, -5, 4, 4, -5, 4, 4, -5, 4, 4))
colnames(data) <- c("Week", "Nino1+2 (SST)", "Nino1+2 (SSTA)", "Nino3 (SST)", "Nino3 (SSTA)",
"Nino34 (SST)", "Nino34 (SSTA)", "Nino4 (SST)", "Nino4 (SSTA)")
data_cleaned <- data[-c(1:4, 2), ]
row.names(data_cleaned) <- c()
data_numeric <- data_cleaned %>% mutate_at(c("Nino1+2 (SST)", "Nino1+2 (SSTA)", "Nino3 (SST)", "Nino3 (SSTA)",
"Nino34 (SST)", "Nino34 (SSTA)", "Nino4 (SST)", "Nino4 (SSTA)"), as.numeric)
head(data_numeric, 10)
str(data)
head(data_numeric, 10)
str(data_numeric)
head(mtcars)
library(reshape2)
install.packages("reshape2")
library(reshape2)
head(mtcars)
install.packages("reshape2")
library(reshape2)
head(mtcars)
str(mtcars)
mtcars$carname <- rownames(mtcars)
carMelt <- melt(mtcars, id.vars = c("carname", "gear", "cyl"), measure.vars = c("mpg", "hp"))
head(carMelt)
tail(carMelt)
cylData <- dcast(carMelt, cyl ~ variable.names)
cylData <- dcast(carMelt, cyl ~ variable)
cylData
library(reshape2)
head(mtcars)
cylData <- dcast(carMelt, cyl ~ variable, mean)
cylData
head(InsectSprays)
tapply(InsectSprays$count, InsectSprays$spray, sum)
spIns <- split(InsectSprays$count, InsectSprays$spray)
spIns
sprCount <- lapply(spIns, sum)
sprCount
unlist(sprCount)
sapply(spIns, sum)
ddply(InsectSprays,.(spray), summarise, sum = sum(count))
library(plyr)
ddply(InsectSprays,.(spray), summarise, sum = sum(count))
?ave
spraySums <- ddply(InsectSprays,.(spray), summarise, sum = ave(count, FUN = sum))
head(spraySums)
ddply(InsectSprays,.(spray), summarise, average = ave(count, FUN = mean))
ddply(InsectSprays,.(spray), summarise, average = ave(count))
ddply(InsectSprays,.(spray), summarise, sum = sum(count))
rm(list = ls())
setwd("C:/Users/CORMAAL/Desktop/DSEF/DS_Specialisation/03_Getting_And_Cleaning_Data/code")
library(dplyr)
chicago <- readRDS("./data/chicago.rds")
str(chicago)
library(dplyr)
chicago <- readRDS("./data/chicago.rds")
str(chicago)
names(chicago)
head(chicago, city:date)
head(select(chicago, city:date))
head(select(chicago, -(city:date)))
i <- match("city", names(chicago))
j <- match("date", names(chicago))
head(chicago[, -(i:j)])
chic.f <- filter(chicago, pm25tmean2 < 30)
head(chic.f)
chic.f <- filter(chicago, pm25tmean2 > 30)
head(chic.f)
chic.f <- filter(chicago, pm25tmean2 > 30 & tmpd > 80)
head(chic.f, 10)
chicago <- arrange(chicago, date)
head(chicago, 3)
tail(chicago, 3)
chicago <- arrange(chicago, desc(date)
head(chicago, 3)
chicago <- arrange(chicago, desc(date)
head(chicago, 3)
chicago <- arrange(chicago, desc(date))
chicago <- arrange(chicago, desc(date))
head(chicago, 3)
tail(chicago, 3)
rm(list = ls())
chicago <- rename(chicago, pm25 = pm25tmean2, dewpoint = dptp)
library(dplyr)
library(dplyr)
chicago <- readRDS("./data/chicago.rds")
str(chicago)
chicago <- rename(chicago, pm25 = pm25tmean2, dewpoint = dptp)
head(chicago)
chicago <- rename(chicago, pm25 = pm25tmean2, dewpoint = dptp)
head(chicago)
library(dplyr)
chicago <- readRDS("./data/chicago.rds")
str(chicago)
names(chicago)
head(select(chicago, city:date))
head(select(chicago, -(city:date)))
i <- match("city", names(chicago))
j <- match("date", names(chicago))
head(chicago[, -(i:j)])
chic.f <- filter(chicago, pm25tmean2 > 30)
head(chic.f)
chic.f <- filter(chicago, pm25tmean2 > 30 & tmpd > 80)
head(chic.f, 10)
chicago <- arrange(chicago, date)
head(chicago, 3)
tail(chicago, 3)
chicago <- arrange(chicago, desc(date))
head(chicago, 3)
tail(chicago, 3)
chicago <- rename(chicago, pm25 = pm25tmean2, dewpoint = dptp)
head(chicago)
chicago <- rename(chicago, pm25 = pm25tmean2, dewpoint = dptp)
head(chicago)
library(dplyr)
chicago <- readRDS("./data/chicago.rds")
str(chicago)
names(chicago)
head(select(chicago, city:date))
library(dplyr)
chicago <- readRDS("./data/chicago.rds")
str(chicago)
names(chicago)
head(select(chicago, city:date))
View(chicago)
library(dplyr)
chicago <- readRDS("./data/chicago.rds")
str(chicago)
library(dplyr)
chicago <- readRDS("./data/chicago.rds")
str(chicago)
library(dplyr)
chicago <- readRDS("./data/chicago.rds")
str(chicago)
rm(list = ls())
library(dplyr)
chicago <- readRDS("./data/chicago.rds")
str(chicago)
names(chicago)
head(select(chicago, city:date))
head(select(chicago, -(city:date)))
i <- match("city", names(chicago))
j <- match("date", names(chicago))
head(chicago[, -(i:j)])
chic.f <- filter(chicago, pm25tmean2 > 30)
head(chic.f)
chic.f <- filter(chicago, pm25tmean2 > 30 & tmpd > 80)
head(chic.f, 10)
chic.f <- filter(chicago, pm25tmean2 > 30 & tmpd > 80)
head(chic.f, 10)
rm(list = ls())
library(dplyr)
chicago <- readRDS("./data/chicago.rds")
str(chicago)
str(chicago)
chicago <- mutate(chicago, pm25detrend = pm25 - mean(pm25, na.rm = TRUE))
chicago <- mutate(chicago, pm25detrend = pm25-mean(pm25, na.rm = TRUE))
chicago <- rename(chicago, pm25 = pm25tmean2, dewpoint = dptp)
head(chicago)
chicago <- mutate(chicago, pm25detrend = pm25-mean(pm25, na.rm = TRUE))
head(select(chicago, pm25, pm25detrend))
UScomms_df <- read.csv("./data/getdata_data_ss06hid.csv")
setwd("C:/Users/alexa/OneDrive/Desktop/DS_Specialisation/03_Getting_And_Cleaning_Data/code")
UScomms_df <- read.csv("./data/getdata_data_ss06hid.csv")
UScomms_df
library(dplyr)
UScomms_df
str(UScomms_df)
unique(UScomms_df[c("ST")])
UScomms_df_filtered <- filter(UScomms_df, ACR = 3, AGS = 6)
UScomms_df_filtered <- filter(UScomms_df, ACR == 3, AGS == 6)
head(UScomms_df_filtered)
agriculturalLogical <- UScomms_df$ACR == 3 & UScomms_df$AGS == 6
agriculturlalLogical
agriculturalLogical
which(UScomms_df == agriculturalLogical)
which(agriculturalLogical == TRUE)
UScomms_df_select <- select(UScomms_df, ACR, AGS)
UScomms_df_mutate <- mutate(UScomms_df, row_num == row_number)
length(UScomms_df)
?row_number
row_index <- 1:6496
UScomms_df_mutate <- mutate(UScomms_df, row_num == row_index)
UScomms_df_mutate <- mutate(UScomms_df, row_num = row_index)
UScomms_df_mutate
UScomms_df_mutate <- mutate(UScomms_df_select, row_num = row_index)
UScomms_df_mutate
UScomms_df <- (read.csv("./data/getdata_data_ss06hid.csv")) %>%
select(ACR, AGS) %>%
mutate(row_num = 1:6496) %>%
filter(ACR == 3, AGS == 6) %>%
head
UScomms_df
UScomms_df <- (read.csv("./data/getdata_data_ss06hid.csv")) %>%
select(ACR, AGS) %>%
mutate(row_num = 1:6496) %>%
filter(ACR == 3, AGS == 6) %>%
print()
UScomms_df <- (read.csv("./data/getdata_data_ss06hid.csv")) %>%
select(ACR, AGS) %>%
mutate(row_num = 1:6496) %>%
filter(ACR == 3, AGS == 6) %>%
head()
UScomms_df <- (read.csv("./data/getdata_data_ss06hid.csv")) %>%
select(ACR, AGS) %>%
mutate(row_num = 1:6496) %>%
filter(ACR == 3, AGS == 6)
head(UScomms_df, 3)
# Clear environment
>>>>>>> 070be4e877c3a56872e0784c891e05467624dfa0
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear console
cat("\014")  # ctrl+L
library(dplyr)  ## library for selecting and sorting
GDP_df <- read.csv("./data/getdata_data_GDP.csv", stringsAsFactors=FALSE)  ## read in the GDP dataframe
setwd("C:/Users/alexa/OneDrive/Desktop/DS_Specialisation/03_Getting_And_Cleaning_Data/code")
GDP_df <- read.csv("./data/getdata_data_GDP.csv", stringsAsFactors=FALSE)  ## read in the GDP dataframe
GDP_df$X.3 <- gsub(",", "", GDP_df$X.3) ## remove commas in the GDP column to facilitate character conversion
EDU_df <- read.csv("./data/getdata_data_EDSTATS_Country.csv", stringsAsFactors=FALSE)  ## read in the education dataframe
colnames(GDP_df)[1] <- "CountryCode"  ## change column name so common columns have same name to allow merging
GDP_vec <- GDP_df$CountryCode  ## create a vector from the CountryCode column in GDP dataframe
GDP_vec_clean <- GDP_vec[GDP_vec != ""]  ## remove the "" values in the vector
EDU_vec <- EDU_df$CountryCode  ## create a vector from the CountryCode column in education dataframe
matches <- match(GDP_vec_clean, EDU_vec)  ## create a vector of all of the matches between the two vectors
matches_clean <- matches[!is.na(matches)]
length(matches_clean)  ## the length of the vector equals the number of matches
countries_GDP <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE)
countries <- countries_GDP$CountryCode
countries_clean <- countries[countries != ""]
countries_unique <- unique(countries_clean)
matches
View(EDU_df)
match_countries <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = FALSE)
countries <- match_countries$CountryCode
x <- C(2, 6, 8)
x = c(2, 6, 8)
y = c(6, 8, 9)
match(x, y)
View(GDP_df)
GDP_df <- read.csv("./data/getdata_data_GDP.csv", stringsAsFactors=FALSE)  ## read in the GDP dataframe
match_countries_sorted <- arrange(match_countries, )
GDP_df$X.3 <- gsub(",", "", GDP_df$X.3) ## remove commas in the GDP column to facilitate character conversion
GDP_df <- read.csv("./data/getdata_data_GDP.csv", stringsAsFactors=FALSE)  ## read in the GDP dataframe
EDU_df <- read.csv("./data/getdata_data_EDSTATS_Country.csv", stringsAsFactors=FALSE)  ## read in the education dataframe
colnames(GDP_df)[1] <- "CountryCode"  ## change column name so common columns have same name to allow merging
colnames(GDP_df)[2] <- "Ranking" ## change column Gross.domestic.product.2012 name to something more manageable
countries_GDP <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = FALSE) %>%  ## merge the dataframes
select(Ranking, CountryCode, Short.Name) %>%  ## select only the GDP ranking, country code and short name columns
transform(Ranking = as.numeric(Ranking)) %>%  ## the GDP Ranking column is in character format -> transform to numeric
arrange(Ranking)  ## sort by GDP ascending (by default)
head(countries_GDP, 13)  ### print first thirteen rows and read the country at row 13
countries_GDP <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = FALSE) %>%  ## merge the dataframes
select(Ranking, CountryCode, Short.Name) %>%  ## select only the GDP ranking, country code and short name columns
transform(Ranking = as.numeric(Ranking)) %>%  ## the GDP Ranking column is in character format -> transform to numeric
arrange(desc(Ranking))  ## sort by GDP ascending (by default)
head(countries_GDP, 13)  ### print first thirteen rows and read the country at row 13
UScomms_df <- (read.csv("./data/getdata_data_ss06hid.csv"))
agriculturalLogical <- UScomms_df$ACR == 3 & UScomms_df$AGS == 6
which(agriculturalLogical == TRUE)
UScomms_df <- (read.csv("./data/getdata_data_ss06hid.csv")) %>%  ## read the US Communities dataframe
select(ACR, AGS) %>%  ## select only the lot size and sales of agricultural products columns
mutate(row_num = 1:6496) %>%  ## add a column to act as row numbers
filter(ACR == 3, AGS == 6)  ## filter the column according to the parameters defined above
head(UScomms_df, 3)  ## print the first three results -> the row_num values give the requested result
jeff <- readJPEG("./data/getdata_jeff.jpg", native = TRUE)  ## read the JPEG file with the parameter native = TRUE
setwd("C:/Users/alexa/OneDrive/Desktop/DS_Specialisation/03_Getting_And_Cleaning_Data/code")
jeff <- readJPEG("./data/getdata_jeff.jpg", native = TRUE)  ## read the JPEG file with the parameter native = TRUE
install.packages("jpeg")
library(jpeg)
<<<<<<< HEAD
setwd("C:/Users/CORMAAL/Desktop/DSEF/DS_Specialisation/03_Getting_And_Cleaning_Data/code")
readJPEG(.data/getdata_jeff.jpg)
readJPEG(./data/getdata_jeff.jpg)
readJPEG("./data/getdata_jeff.jpg")
jeff <- readJPEG(("./data/getdata_jeff.jpg"))
?quantile
jeff <- readJPEG(("./data/getdata_jeff.jpg", native = TRUE))
jeff <- readJPEG("./data/getdata_jeff.jpg", native = TRUE)
quantile(jeff, probs = 0.8)
quantile(jeff, probs = 0.3)
GDP_df <- read.csv("./data/getdata_data_GDP.csv")
EDU_df <- read.csv("getdata_data_EDSTATS_Country.csv")
EDU_df <- read.csv("./data/getdata_data_EDSTATS_Country.csv")
?bind
dim(GDP_df)
dim(EDU_df)
str(GDP_df)
str(EDU_df)
View(GDP_df)
View(EDU_df)
?match
GDP_vec <- GDP_df$X
EDU_vec <- EDU_df$CountryCode
match(GDP_vec, EDU_vec)
matches <- match(GDP_vec, EDU_vec)
!is.na(matches)
sum!is.na(matches)
sum(!is.na(matches))
GDP_df <- read.csv("./data/getdata_data_GDP.csv")
setwd("C:/Users/CORMAAL/Desktop/DSEF/DS_Specialisation/03_Getting_And_Cleaning_Data/code/data")
GDP_df <- read.csv("./data/getdata_data_GDP.csv")
setwd("C:/Users/CORMAAL/Desktop/DSEF/DS_Specialisation/03_Getting_And_Cleaning_Data/code")
GDP_df <- read.csv("./data/getdata_data_GDP.csv")
DU_df <- read.csv("./data/getdata_data_EDSTATS_Country.csv")
View(DU_df)
View(DU_df)
EDU_df <- read.csv("./data/getdata_data_EDSTATS_Country.csv")
GDP_vec <- GDP_df$X
GDP_vec
head(GDP_df, 10)
View(GDP_df)
View(EDU_df)
colnames(GDP_df)[1] <- “CountryCode”
colnames(GDP_df)[1] <- "CountryCode"
head(GDP_df)
merged_df = merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE)
head(merged_df)
library(dplyer)
library(dplyr)
countries <- select(merged_df, CountryCode)
dim(countries)
countries_sorted <- arrange(countries, CountryCode)
countries_sorted
View(merged_df)
countries_GDP <- select(merged_df, CountryCode, Gross.domestic.product.2012)
countries_GDP_sorted <- arrange(countries_GDP, Gross.domestic.product.2012)
head(countries_GDP_sorted, 20)
View(countries_GDP_sorted)
countries_GDP_sorted <- arrange(countries_GDP, X.3)
countries_GDP_sorted <- arrange(countries_GDP, "X.3")
countries_GDP_sorted
countries_GDP <- select(merged_df, CountryCode, "X.3")
colnames(countries_GDP) <- c("Country", "GDP")
countries_GDP_sorted <- arrange(countries_GDP, GDP)
head(countries_GDP_sorted, 20)
View(countries_GDP_sorted)
countries_GDP <- select(merged_df, Long.Name, "X.3")
colnames(countries_GDP) <- c("Country", "GDP")
countries_GDP_sorted <- arrange(countries_GDP, GDP)
countries_GDP_sorted
countries_GDP <- select(merged_df, CountryCode, Short.Name, "X.3")
colnames(countries_GDP) <- c("Code", "Country", "GDP")
countries_GDP_sorted <- arrange(countries_GDP, GDP)
countries_GDP_sorted
str(countries_GDP_sorted)
countries_GDP$GDP <- as.numeric
countries_GDP <- transform(countries_GDP, GDP = as.numeric(GDP))
str(countries_GDP)
countries_GDP_sorted <- arrange(countries_GDP, GDP)
head(countries_GDP_sorted, 20)
countries_GDP <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%
select(CountryCode, Short.Name, "X.3") %>%
colnames(countries_GDP) <- c("Code", "Country", "GDP") %>%
transform(countries_GDP, GDP = as.numeric(GDP)) %>%
arrange(GDP)
countries_GDP <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%
select(CountryCode, Short.Name, "X.3") %>%
transform(countries_GDP, "X.3" = as.numeric("X.3")) %>%
arrange(GDP)
head(countries_GDP, 20)
countries_GDP <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%
select(CountryCode, Short.Name, "X.3") %>%
transform("X.3" = as.numeric("X.3")) %>%
arrange(GDP)
countries_GDP <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%
select(CountryCode, Short.Name, "X.3") %>%
transform("X.3" = as.numeric("X.3")) %>%
arrange("X.3")
head(countries_GDP, 20)
countries_GDP <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%
select(CountryCode, Short.Name, "X.3") %>%
transform("X.3" = as.numeric("X.3")) %>%
arrange(X.3)
head(countries_GDP, 20)
countries_GDP <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%
select(CountryCode, Short.Name, "X.3") %>%
transform(X.3 = as.numeric(X.3)) %>%
arrange(X.3)
head(countries_GDP, 20)
GDP_vec <- GDP_df$X
EDU_vec <- EDU_df$CountryCode
match(GDP_vec, EDU_vec)
sum(!is.na(matches))
GDP_vec <- GDP_df$CountryCode
GDP_vec
match(GDP_vec, EDU_vec)
sum(!is.na(matches))
matches <- match(GDP_vec, EDU_vec)
sum(!is.na(matches))
matches <- match(EDU_vec, GDP_vec)
sum(!is.na(matches))
length(matches)
matches
HI_OECD <- EDU_df$Income.Group == "High income: OECD"
length(HI_OECD)
HI_OECD_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%  ## merge the dataframes
select(CountryCode, Income.Group, "X.3") %>%  ## select only the coutry code, short name and GDP columns
filter(Income.Group == "High income: OECD") %>%  ## tfilter for the high income OECD countries
mean(X.3) %>%  ## calculate the mean GDP for those countries
print  ## print the result
HI_OECD_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%  ## merge the dataframes
select(CountryCode, Income.Group, "X.3") %>%  ## select only the coutry code, short name and GDP columns
transform(X.3 = as.numeric(X.3)) %>%  ## the GDP column is in character format -> transform to numeric
filter(Income.Group == "High income: OECD") %>%  ## tfilter for the high income OECD countries
mean(X.3) %>%  ## calculate the mean GDP for those countries
print  ## print the result
HI_OECD_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%  ## merge the dataframes
select(CountryCode, Income.Group, "X.3") %>%  ## select only the coutry code, short name and GDP columns
filter(Income.Group == "High income: OECD") %>%  ## tfilter for the high income OECD countries
transform(X.3 = as.numeric(X.3)) %>%  ## the GDP column is in character format -> transform to numeric
mean(X.3) %>%  ## calculate the mean GDP for those countries
print  ## print the result
HI_OECD_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE)
HI_OECD_df_filtered <- select(HI_OECD_df, CountryCode, Income.Group, "X.3")
HI_OECD_df_transformed <- transform(HI_OECD_df_filtered, X.3 = as.numeric(X.3))
View(HI_OECD_df_filtered)
HI_OECD_df_selected <- select(HI_OECD_df, CountryCode, Income.Group, "X.3")
HI_OECD_df_filtered <- filter(HI_OECD_selected, Income.Group == "High income: OECD")
HI_OECD_df_filtered <- filter(HI_OECD_df_selected, Income.Group == "High income: OECD")
View(HI_OECD_df_filtered)
View(HI_OECD_df_transformed <- transform(HI_OECD_df_filtered, X.3 = as.numeric(X.3))
HI_OECD_df_transformed <- transform(HI_OECD_df_filtered, X.3 = as.numeric(X.3))
HI_OECD_df_transformed
HI_OECD_df_transformed <- transform(HI_OECD_df_filtered, "X.3" = as.numeric("X.3"))
HI_OECD_df_transformed
str(HI_OECD_df_filtered)
str(HI_OECD_df_transformed)
str(HI_OECD_df_filtered)
View(HI_OECD_df_filtered)
View(HI_OECD_df_transformed)
X <- transform(HI_OECD_df_filtered, X.3 = as.numeric(X.3))
x
X
HI_OECD_df_transformed <- transform(HI_OECD_df_filtered, X.3 = as.numeric(iconv(X.3, "utf-8", "ascii", sub = ""))
HI_OECD_df_transformed <- transform(HI_OECD_df_filtered, X.3 = as.numeric(iconv(X.3, "utf-8", "ascii", sub = "")))
str(HI_OECD_df_transformed)
HI_OECD_df_transformed <- transform(HI_OECD_df, X.3 = as.numeric(X.3))
View(HI_OECD_df_transformed)
View(HI_OECD_df)
View(HI_OECD_df_filtered)
GDP_df <- read.csv("./data/getdata_data_GDP.csv", stringsAsFactors=FALSE)
EDU_df <- read.csv("./data/getdata_data_EDSTATS_Country.csv", stringsAsFactors=FALSE)
HI_OECD_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE)
colnames(GDP_df)[1] <- "CountryCode"
HI_OECD_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE)
HI_OECD_df_selected <- select(HI_OECD_df, CountryCode, Income.Group, "X.3")
HI_OECD_df_filtered <- filter(HI_OECD_df_selected, Income.Group == "High income: OECD")
HI_OECD_df_filtered$X.3 <- gsub(",", "", HI_OECD_df_filtered$X.3)
View(HI_OECD_df_filtered)
str(HI_OECD_df_filtered)
HI_OECD_df_transformed <- transform(HI_OECD_df_filtered, X.3 = as.numeric(X.3))
str(HI_OECD_df_transformed)
GDP_df <- read.csv("./data/getdata_data_GDP.csv", stringsAsFactors=FALSE)  ## read in the GDP dataframe
GDP_df$X.3 <- gsub(",", "", GDP_df$X.3)
EDU_df <- read.csv("./data/getdata_data_EDSTATS_Country.csv", stringsAsFactors=FALSE)
colnames(GDP_df)[1] <- "CountryCode"
HI_OECD_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%  ## merge the dataframes
select(CountryCode, Income.Group, "X.3") %>%  ## select only the coutry code, short name and GDP columns
filter(Income.Group == "High income: OECD") %>%  ## tfilter for the high income OECD countries
transform(X.3 = as.numeric(X.3)) %>%  ## the GDP column is in character format -> transform to numeric
mean(X.3) %>%  ## calculate the mean GDP for those countries
print  ## print the result
HI_OECD_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE)
HI_OECD_df_selected <- select(HI_OECD_df, CountryCode, Income.Group, "X.3")
HI_OECD_df_filtered <- filter(Income.Group == "High income: OECD")
HI_OECD_df_filtered <- filter(HI_OECD_df_selected, Income.Group == "High income: OECD")
HI_OECD_df_transformed <- transform(HI_OECD_df_filtered, X.3 = as.numeric(X.3))
View(HI_OECD_df_transformed)
str(HI_OECD_df_transformed)
mean(HI_OECD_df_transformed$X.3)
length(HI_OECD_df_transformed$X.3)
sum(HI_OECD_df_transformed$X.3)
sum(HI_OECD_df_transformed$X.3) / length(HI_OECD_df_transformed$X.3)
HI_OECD-df_grouped <- group_by(HI_OECD_df_transformed, Income.Group)
HI_OECD_df_grouped <- group_by(HI_OECD_df_transformed, Income.Group)
mean(HI_OECD_df_grouped$X.3)
HI_OECD_df_grouped
HI_OECD_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%  ## merge the dataframes
select(CountryCode, Income.Group, "X.3") %>%  ## select only the coutry code, short name and GDP columns
transform(X.3 = as.numeric(X.3)) %>%  ## the GDP column is in character format -> transform to numeric
group_by(Income.Group) %>%
mean(X.3) %>%  ## calculate the mean GDP for those countries
print  ## print the result
GDP_df <- read.csv("./data/getdata_data_GDP.csv", stringsAsFactors=FALSE)
GDP_df$X.3 <- gsub(",", "", GDP_df$X.3)
EDU_df <- read.csv("./data/getdata_data_EDSTATS_Country.csv", stringsAsFactors=FALSE)
colnames(GDP_df)[1] <- "CountryCode"
income_groups_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE)
income_groups_df_selected <- select(income_groups_df, CountryCode, Income.Group, "X.3")
income_groups_df_grouped <- group_by(income_groups_df_selected, Income.Group)
income_groups_df_grouped
mean(income_groups_df_grouped$X.3)
mean(income_groups_df_grouped, X.3)
str()
str(income_groups_df_grouped)
View(income_groups_df_grouped)
income_groups_df %>%  group_by(Income.Group) %>% summarise(mean = mean(X.3), sum = sum(X.3), n = n())
head(income_groups_df_grouped)
income_groups_df_filtered <- filter(income_groups_df_grouped, Income.Group = !is.na(Income.Group))
income_groups_df_filtered <- filter(income_groups_df_grouped, Income.Group == !is.na(Income.Group))
head(income_groups_df_filtered)
View(income_groups_df_grouped)
income_groups_df_filtered <- drop_na(income_groups_df_grouped, Income.Group)
?drop_na
income_groups_df_filtered <- filter(income_groups_df_grouped, Income.Group != NA)
head(income_groups_df_filtered)
View(income_groups_df_grouped)
View(income_groups_df_filtered)
income_groups_df_grouped %>% filter(!is.na(Income.Group))
income_groups_df_filtered <- filter(income_groups_df_grouped, !is.na(Income.Group))
HI_OECD_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%  ## merge the dataframes
select(CountryCode, Income.Group, "X.3") %>%  ## select only the coutry code, short name and GDP columns
transform(X.3 = as.numeric(X.3)) %>%  ## the GDP column is in character format -> transform to numeric
group_by(Income.Group) %>%
filter(!is.na(Income.Group))
mean(X.3) %>%  ## calculate the mean GDP for those countries
print  ## print the result
HI_OECD_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%  ## merge the dataframes
select(CountryCode, Income.Group, "X.3") %>%  ## select only the coutry code, short name and GDP columns
transform(X.3 = as.numeric(X.3)) %>%  ## the GDP column is in character format -> transform to numeric
group_by(Income.Group) %>%
filter(!is.na(Income.Group)) %>%
summarise(mean = mean(X.3)) %>%  ## calculate the mean GDP for those countries
print
HI_OECD_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%  ## merge the dataframes
select(CountryCode, Income.Group, "X.3") %>%  ## select only the coutry code, short name and GDP columns
transform(X.3 = as.numeric(X.3)) %>%  ## the GDP column is in character format -> transform to numeric
group_by(Income.Group) %>%
filter(!is.na(Income.Group, !is.na(X.3))) %>%
summarise(mean = mean(X.3)) %>%  ## calculate the mean GDP for those countries
print
HI_OECD_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%  ## merge the dataframes
select(CountryCode, Income.Group, "X.3") %>%  ## select only the coutry code, short name and GDP columns
transform(X.3 = as.numeric(X.3)) %>%  ## the GDP column is in character format -> transform to numeric
group_by(Income.Group) %>%
filter(!is.na(Income.Group), !is.na(X.3)) %>%
summarise(mean = mean(X.3)) %>%  ## calculate the mean GDP for those countries
print
colnames(GDP_df)[2] <- "Ranking"
HI_OECD_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%  ## merge the dataframes
select(CountryCode, Income.Group, Ranking) %>%  ## select only the coutry code, short name and GDP columns
transform(Ranking = as.numeric(Ranking)) %>%  ## the GDP column is in character format -> transform to numeric
group_by(Income.Group) %>%
filter(!is.na(Income.Group), !is.na(Ranking)) %>%
summarise(mean = mean(Ranking)) %>%  ## calculate the mean GDP for those countries
print  ## print the result
GDP_df <- read.csv("./data/getdata_data_GDP.csv", stringsAsFactors=FALSE)
str(GDP_df)
GDP_df <- read.csv("./data/getdata_data_GDP.csv", stringsAsFactors=FALSE)  ## read in the GDP dataframe
EDU_df <- read.csv("./data/getdata_data_EDSTATS_Country.csv", stringsAsFactors=FALSE)  ## read in the education dataframe
colnames(GDP_df)[1] <- "CountryCode"  ## change column name so common columns have same name to allow merging
colnames(GDP_df)[2] <- "Ranking" ## change the column name "Gross.domestic.product.2012" to something more manageable
average_ranking <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%  ## merge the dataframes
select(Income.Group, Ranking) %>%  ## select only the coutry code, Income.Group and GDP ranking columns
transform(Ranking = as.numeric(Ranking)) %>%  ## the GDP ranking column is in character format -> transform to numeric
group_by(Income.Group) %>%  ## group the dataframe by Income.Group
filter(!is.na(Income.Group), !is.na(Ranking)) %>%  ## filter out the NA values
summarise(mean = mean(Ranking)) %>%  ## calculate the mean GDP ranking for the grouped countries
print  ## print the result
nums <- c(2,4,5,7,9)
mean(nums)
nums <- c(2,4,5,7,9, 11, 13)
mean(nums)
mean(nums, 2)
?mean
mean(nums, nsmall = 2)
round(mean(nums, 2))
round(mean(nums, 2, nsmall = 2))
format(round(mean(nums, 2)))
format(round(mean(nums, 2, nsmall = 2)))
sprintf(mean(nums), fmt = '%#.2f')
=======
jeff <- readJPEG("./data/getdata_jeff.jpg", native = TRUE)  ## read the JPEG file with the parameter native = TRUE
quantile(jeff, probs = 0.3)  ## calculate the 30th percentile
quantile(jeff, probs = 0.8)  ## calculate the 80th percentile
>>>>>>> 070be4e877c3a56872e0784c891e05467624dfa0
GDP_df <- read.csv("./data/getdata_data_GDP.csv", stringsAsFactors=FALSE)  ## read in the GDP dataframe
EDU_df <- read.csv("./data/getdata_data_EDSTATS_Country.csv", stringsAsFactors=FALSE)  ## read in the education dataframe
colnames(GDP_df)[1] <- "CountryCode"  ## change column name so common columns have same name to allow merging
colnames(GDP_df)[2] <- "Ranking" ## change the column name "Gross.domestic.product.2012" to something more manageable
average_ranking <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%  ## merge the dataframes
select(Income.Group, Ranking) %>%  ## select only the coutry code, Income.Group and GDP ranking columns
transform(Ranking = as.numeric(Ranking)) %>%  ## the GDP ranking column is in character format -> transform to numeric
group_by(Income.Group) %>%  ## group the dataframe by Income.Group
filter(!is.na(Income.Group), !is.na(Ranking)) %>%  ## filter out the NA values
summarise(mean = sprintf(mean(Ranking), fmt = '%#.6f')) %>%  ## calculate the mean GDP ranking for the grouped countries
print  ## print the result
GDP_df <- read.csv("./data/getdata_data_GDP.csv", stringsAsFactors=FALSE)  ## read in the GDP dataframe
EDU_df <- read.csv("./data/getdata_data_EDSTATS_Country.csv", stringsAsFactors=FALSE)  ## read in the education dataframe
colnames(GDP_df)[1] <- "CountryCode"  ## change column name so common columns have same name to allow merging
colnames(GDP_df)[2] <- "Ranking" ## change the column name "Gross.domestic.product.2012" to something more manageable
<<<<<<< HEAD
ranking_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE)
ranking_df_selected <- select(ranking_df, Income.Group, Ranking)
ranking_df_transformed <- transform(ranking_df_selected, Ranking = as.numeric(Ranking))
ranking_df_filtered <- filter(ranking_df_transformed, Ranking <= 38, Income.Group == "Lower middle income")
length(ranking_df_filtered)
ranking_df_filtered
dim(ranking_df_filtered)
GDP_df <- read.csv("./data/getdata_data_GDP.csv", stringsAsFactors=FALSE)  ## read in the GDP dataframe
EDU_df <- read.csv("./data/getdata_data_EDSTATS_Country.csv", stringsAsFactors=FALSE)  ## read in the education dataframe
colnames(GDP_df)[1] <- "CountryCode"  ## change column name so common columns have same name to allow merging
colnames(GDP_df)[2] <- "Ranking" ## change the column name "Gross.domestic.product.2012" to something more manageable
ranking_quantiles <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%  ## merge the dataframes
select(Income.Group, Ranking) %>%  ## select only the coutry code, Income.Group and GDP ranking columns
transform(Ranking = as.numeric(Ranking)) %>%  ## the GDP ranking column is in character format -> transform to numeric
select(Short.Name, Ranking, Income.Group) %>%  ## group the dataframe by Income.Group
filter(Ranking <=38, Income.Group == "Lower middle income") %>%  ## filter out the NA values
print  ## print the result
=======
>>>>>>> 070be4e877c3a56872e0784c891e05467624dfa0
ranking_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%  ## merge the dataframes
select(Short.Name, Ranking, Income.Group) %>%  ## select only the coutry code, Income.Group and GDP ranking columns
transform(Ranking = as.numeric(Ranking)) %>%  ## the GDP ranking column is in character format -> transform to numeric
filter(Ranking <=38, Income.Group == "Lower middle income") %>%  ## filter out the NA values
print  ## print the result
<<<<<<< HEAD
GDP_df <- read.csv("./data/getdata_data_GDP.csv", stringsAsFactors=FALSE)  ## read in the GDP dataframe
GDP_df$X.3 <- gsub(",", "", GDP_df$X.3) ## remove commas in the GDP column to facilitate character conversion
EDU_df <- read.csv("./data/getdata_data_EDSTATS_Country.csv", stringsAsFactors=FALSE)  ## read in the education dataframe
colnames(GDP_df)[1] <- "CountryCode"  ## change column name so common columns have same name to allow merging
GDP_vec <- GDP_df$CountryCode  ## create a vector from the CountryCode column in GDP dataframe
EDU_vec <- EDU_df$CountryCode  ## create a vector from the CountryCode column in education dataframe
matches <- match(GDP_vec, EDU_vec)  ## create a vector of all of the matches between the two vectors
length(matches)  ## the length of the vector equals the number of matches
countries_GDP <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%  ## merge the dataframes
select(CountryCode, Short.Name, "X.3") %>%  ## select only the coutry code, short name and GDP columns
transform(X.3 = as.numeric(X.3)) %>%  ## the GDP column is in character format -> transform to numeric
arrange(X.3)  ## sort by GDP ascending (by default)
head(countries_GDP, 20)  ### print first twenty rows and read the country at row 13
matches
matches_clean <- !is.na(matches)
length(matches_clean)  ## the length of the vector equals the number of matches
matches_clean <- matches[!is.na(matches)]
length(matches_clean)  ## the length of the vector equals the number of matches
matches_clean
result <- GDP_vec %in% EDU_vec
length(result)
length(result[TRUE])
result
sum(result)
GDP_df <- read.csv("./data/getdata_data_GDP.csv", stringsAsFactors=FALSE)  ## read in the GDP dataframe
GDP_df$X.3 <- gsub(",", "", GDP_df$X.3) ## remove commas in the GDP column to facilitate character conversion
EDU_df <- read.csv("./data/getdata_data_EDSTATS_Country.csv", stringsAsFactors=FALSE)  ## read in the education dataframe
colnames(GDP_df)[1] <- "CountryCode"  ## change column name so common columns have same name to allow merging
GDP_vec <- GDP_df$CountryCode  ## create a vector from the CountryCode column in GDP dataframe
EDU_vec <- EDU_df$CountryCode  ## create a vector from the CountryCode column in education dataframe
matches <- match(GDP_vec, EDU_vec)  ## create a vector of all of the matches between the two vectors
matches_clean <- matches[!is.na(matches)]
length(matches_clean)  ## the length of the vector equals the number of matches
UScomms_df <- (read.csv("./data/getdata_data_ss06hid.csv"))
agriculturalLogical <- UScomms_df$ACR == 3 & UScomms_df$AGS == 6
which(agriculturalLogical == TRUE)
GDP_vec
EDU_vec
sort(matches_clean)
GDP_vec <- !is.na(GDP_df$CountryCode)  ## create a vector from the CountryCode column in GDP dataframe
GDP_vec <- GDP_df$CountryCode  ## create a vector from the CountryCode column in GDP dataframe
GDP_vec
stri_remove_empty(GDP_vec)
stri_omit_na(GDP_vec)
GDP_vec[GDP_vec != ""]
GDP_vec <- GDP_df$CountryCode  ## create a vector from the CountryCode column in GDP dataframe
GDP_vec_clean <- GDP_vec[GDP_vec != ""]  ## remove the "" values in the vector
EDU_vec <- EDU_df$CountryCode  ## create a vector from the CountryCode column in education dataframe
matches <- match(GDP_vec_clean, EDU_vec)  ## create a vector of all of the matches between the two vectors
matches_clean <- matches[!is.na(matches)]
length(matches_clean)  ## the length of the vector equals the number of matches
matches_clean
sort(matches_clean)
=======
dim(countries_GDP)
countries_GDP
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear console
cat("\014")  # ctrl+L
col_names <- c("address", "direction", "street", "crossStreet", "intersection", "Location.1")
tolower(col_names)
split_names <- strsplit(col_names)
split_names <- strsplit(col_names, "\\.")
split_names
my_list <- list(letters = c("A", "b", "c"), numbers = 1:3, matrix(1:25, ncol = 5))
head(my_list)
my_list[1]
my_list$letters
my_list[[1]]
first_element <- function(x){x[1]}
sapply(split_names, first_element)
setwd("C:/Users/alexa/OneDrive/Desktop/DS_Specialisation/03_Getting_And_Cleaning_Data/code")
reviews <- read.csv("./data/reviews.csv")
solutions <- read.csv("./data/solutions.csv")
head(reviews, 2)
head(solutions)
head(solutions, 2)
names(reviews)
sub("_", "", names(reviews), )
head(solutions, 2)
names(reviews)
sub("_", "", names(reviews), )
test_name <- "this_is_a_test"
sub("_", "", test_name)
gsub("_", "", test_name)
<<<<<<< HEAD
nchar("Alexander Cormack")
nchar("Alexander Cormack", 1, 9)
substr("Alexander Cormack", 1, 9)
paste("Alexander", "Cormack")
paste("Alexander", "Cormack", sep = "$")
paste0("Alexander", "Cormack")
library(stringr)
str_trim("     Alexander        ")
library(knitr)
=======
>>>>>>> 070be4e877c3a56872e0784c891e05467624dfa0
>>>>>>> abea784d2be924da03eba99c5b9ad57d3ceef8be
