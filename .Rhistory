-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1",
| country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarise(by_package, size = mean(size))
summarise(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count()))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
print
submit()
submit()
rm(list = ls())
p_unload(all)  # Remove all add-ons
rm(list = ls())
# p_unload(all)  # Remove all add-ons
dev.off()  # But only if there IS a plot
rm(list = ls())
# p_unload(all)  # Remove all add-ons
# dev.off()  # But only if there IS a plot
cat("\014")  # ctrl+L
swilr()
swirl()
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, into = c("sex", "class"))
submit()
students3
submit()
spread()
?spread
submit()
submit()
submit()
submit()
library(readr)
parse_number("class5")
submit()
students4
submit()
submit()
submit()
submit()
submit()
passed
failed
mutate(passed, status = passed)
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
?select
?gather
?separate
?data.frame
submit()
submit()
?group_by
submit()
install.packages("jpeg")
library(jpeg)
setwd("C:/Users/CORMAAL/Desktop/DSEF/DS_Specialisation/03_Getting_And_Cleaning_Data/code")
readJPEG(.data/getdata_jeff.jpg)
readJPEG(./data/getdata_jeff.jpg)
readJPEG("./data/getdata_jeff.jpg")
jeff <- readJPEG(("./data/getdata_jeff.jpg"))
?quantile
jeff <- readJPEG(("./data/getdata_jeff.jpg", native = TRUE))
jeff <- readJPEG("./data/getdata_jeff.jpg", native = TRUE)
quantile(jeff, probs = 0.8)
quantile(jeff, probs = 0.3)
GDP_df <- read.csv("./data/getdata_data_GDP.csv")
EDU_df <- read.csv("getdata_data_EDSTATS_Country.csv")
EDU_df <- read.csv("./data/getdata_data_EDSTATS_Country.csv")
?bind
dim(GDP_df)
dim(EDU_df)
str(GDP_df)
str(EDU_df)
View(GDP_df)
View(EDU_df)
?match
GDP_vec <- GDP_df$X
EDU_vec <- EDU_df$CountryCode
match(GDP_vec, EDU_vec)
matches <- match(GDP_vec, EDU_vec)
!is.na(matches)
sum!is.na(matches)
sum(!is.na(matches))
GDP_df <- read.csv("./data/getdata_data_GDP.csv")
setwd("C:/Users/CORMAAL/Desktop/DSEF/DS_Specialisation/03_Getting_And_Cleaning_Data/code/data")
GDP_df <- read.csv("./data/getdata_data_GDP.csv")
setwd("C:/Users/CORMAAL/Desktop/DSEF/DS_Specialisation/03_Getting_And_Cleaning_Data/code")
GDP_df <- read.csv("./data/getdata_data_GDP.csv")
DU_df <- read.csv("./data/getdata_data_EDSTATS_Country.csv")
View(DU_df)
View(DU_df)
EDU_df <- read.csv("./data/getdata_data_EDSTATS_Country.csv")
GDP_vec <- GDP_df$X
GDP_vec
head(GDP_df, 10)
View(GDP_df)
View(EDU_df)
colnames(GDP_df)[1] <- “CountryCode”
colnames(GDP_df)[1] <- "CountryCode"
head(GDP_df)
merged_df = merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE)
head(merged_df)
library(dplyer)
library(dplyr)
countries <- select(merged_df, CountryCode)
dim(countries)
countries_sorted <- arrange(countries, CountryCode)
countries_sorted
View(merged_df)
countries_GDP <- select(merged_df, CountryCode, Gross.domestic.product.2012)
countries_GDP_sorted <- arrange(countries_GDP, Gross.domestic.product.2012)
head(countries_GDP_sorted, 20)
View(countries_GDP_sorted)
countries_GDP_sorted <- arrange(countries_GDP, X.3)
countries_GDP_sorted <- arrange(countries_GDP, "X.3")
countries_GDP_sorted
countries_GDP <- select(merged_df, CountryCode, "X.3")
colnames(countries_GDP) <- c("Country", "GDP")
countries_GDP_sorted <- arrange(countries_GDP, GDP)
head(countries_GDP_sorted, 20)
View(countries_GDP_sorted)
countries_GDP <- select(merged_df, Long.Name, "X.3")
colnames(countries_GDP) <- c("Country", "GDP")
countries_GDP_sorted <- arrange(countries_GDP, GDP)
countries_GDP_sorted
countries_GDP <- select(merged_df, CountryCode, Short.Name, "X.3")
colnames(countries_GDP) <- c("Code", "Country", "GDP")
countries_GDP_sorted <- arrange(countries_GDP, GDP)
countries_GDP_sorted
str(countries_GDP_sorted)
countries_GDP$GDP <- as.numeric
countries_GDP <- transform(countries_GDP, GDP = as.numeric(GDP))
str(countries_GDP)
countries_GDP_sorted <- arrange(countries_GDP, GDP)
head(countries_GDP_sorted, 20)
countries_GDP <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%
select(CountryCode, Short.Name, "X.3") %>%
colnames(countries_GDP) <- c("Code", "Country", "GDP") %>%
transform(countries_GDP, GDP = as.numeric(GDP)) %>%
arrange(GDP)
countries_GDP <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%
select(CountryCode, Short.Name, "X.3") %>%
transform(countries_GDP, "X.3" = as.numeric("X.3")) %>%
arrange(GDP)
head(countries_GDP, 20)
countries_GDP <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%
select(CountryCode, Short.Name, "X.3") %>%
transform("X.3" = as.numeric("X.3")) %>%
arrange(GDP)
countries_GDP <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%
select(CountryCode, Short.Name, "X.3") %>%
transform("X.3" = as.numeric("X.3")) %>%
arrange("X.3")
head(countries_GDP, 20)
countries_GDP <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%
select(CountryCode, Short.Name, "X.3") %>%
transform("X.3" = as.numeric("X.3")) %>%
arrange(X.3)
head(countries_GDP, 20)
countries_GDP <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%
select(CountryCode, Short.Name, "X.3") %>%
transform(X.3 = as.numeric(X.3)) %>%
arrange(X.3)
head(countries_GDP, 20)
GDP_vec <- GDP_df$X
EDU_vec <- EDU_df$CountryCode
match(GDP_vec, EDU_vec)
sum(!is.na(matches))
GDP_vec <- GDP_df$CountryCode
GDP_vec
match(GDP_vec, EDU_vec)
sum(!is.na(matches))
matches <- match(GDP_vec, EDU_vec)
sum(!is.na(matches))
matches <- match(EDU_vec, GDP_vec)
sum(!is.na(matches))
length(matches)
matches
HI_OECD <- EDU_df$Income.Group == "High income: OECD"
length(HI_OECD)
HI_OECD_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%  ## merge the dataframes
select(CountryCode, Income.Group, "X.3") %>%  ## select only the coutry code, short name and GDP columns
filter(Income.Group == "High income: OECD") %>%  ## tfilter for the high income OECD countries
mean(X.3) %>%  ## calculate the mean GDP for those countries
print  ## print the result
HI_OECD_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%  ## merge the dataframes
select(CountryCode, Income.Group, "X.3") %>%  ## select only the coutry code, short name and GDP columns
transform(X.3 = as.numeric(X.3)) %>%  ## the GDP column is in character format -> transform to numeric
filter(Income.Group == "High income: OECD") %>%  ## tfilter for the high income OECD countries
mean(X.3) %>%  ## calculate the mean GDP for those countries
print  ## print the result
HI_OECD_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%  ## merge the dataframes
select(CountryCode, Income.Group, "X.3") %>%  ## select only the coutry code, short name and GDP columns
filter(Income.Group == "High income: OECD") %>%  ## tfilter for the high income OECD countries
transform(X.3 = as.numeric(X.3)) %>%  ## the GDP column is in character format -> transform to numeric
mean(X.3) %>%  ## calculate the mean GDP for those countries
print  ## print the result
HI_OECD_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE)
HI_OECD_df_filtered <- select(HI_OECD_df, CountryCode, Income.Group, "X.3")
HI_OECD_df_transformed <- transform(HI_OECD_df_filtered, X.3 = as.numeric(X.3))
View(HI_OECD_df_filtered)
HI_OECD_df_selected <- select(HI_OECD_df, CountryCode, Income.Group, "X.3")
HI_OECD_df_filtered <- filter(HI_OECD_selected, Income.Group == "High income: OECD")
HI_OECD_df_filtered <- filter(HI_OECD_df_selected, Income.Group == "High income: OECD")
View(HI_OECD_df_filtered)
View(HI_OECD_df_transformed <- transform(HI_OECD_df_filtered, X.3 = as.numeric(X.3))
HI_OECD_df_transformed <- transform(HI_OECD_df_filtered, X.3 = as.numeric(X.3))
HI_OECD_df_transformed
HI_OECD_df_transformed <- transform(HI_OECD_df_filtered, "X.3" = as.numeric("X.3"))
HI_OECD_df_transformed
str(HI_OECD_df_filtered)
str(HI_OECD_df_transformed)
str(HI_OECD_df_filtered)
View(HI_OECD_df_filtered)
View(HI_OECD_df_transformed)
X <- transform(HI_OECD_df_filtered, X.3 = as.numeric(X.3))
x
X
HI_OECD_df_transformed <- transform(HI_OECD_df_filtered, X.3 = as.numeric(iconv(X.3, "utf-8", "ascii", sub = ""))
HI_OECD_df_transformed <- transform(HI_OECD_df_filtered, X.3 = as.numeric(iconv(X.3, "utf-8", "ascii", sub = "")))
str(HI_OECD_df_transformed)
HI_OECD_df_transformed <- transform(HI_OECD_df, X.3 = as.numeric(X.3))
View(HI_OECD_df_transformed)
View(HI_OECD_df)
View(HI_OECD_df_filtered)
GDP_df <- read.csv("./data/getdata_data_GDP.csv", stringsAsFactors=FALSE)
EDU_df <- read.csv("./data/getdata_data_EDSTATS_Country.csv", stringsAsFactors=FALSE)
HI_OECD_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE)
colnames(GDP_df)[1] <- "CountryCode"
HI_OECD_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE)
HI_OECD_df_selected <- select(HI_OECD_df, CountryCode, Income.Group, "X.3")
HI_OECD_df_filtered <- filter(HI_OECD_df_selected, Income.Group == "High income: OECD")
HI_OECD_df_filtered$X.3 <- gsub(",", "", HI_OECD_df_filtered$X.3)
View(HI_OECD_df_filtered)
str(HI_OECD_df_filtered)
HI_OECD_df_transformed <- transform(HI_OECD_df_filtered, X.3 = as.numeric(X.3))
str(HI_OECD_df_transformed)
GDP_df <- read.csv("./data/getdata_data_GDP.csv", stringsAsFactors=FALSE)  ## read in the GDP dataframe
GDP_df$X.3 <- gsub(",", "", GDP_df$X.3)
EDU_df <- read.csv("./data/getdata_data_EDSTATS_Country.csv", stringsAsFactors=FALSE)
colnames(GDP_df)[1] <- "CountryCode"
HI_OECD_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%  ## merge the dataframes
select(CountryCode, Income.Group, "X.3") %>%  ## select only the coutry code, short name and GDP columns
filter(Income.Group == "High income: OECD") %>%  ## tfilter for the high income OECD countries
transform(X.3 = as.numeric(X.3)) %>%  ## the GDP column is in character format -> transform to numeric
mean(X.3) %>%  ## calculate the mean GDP for those countries
print  ## print the result
HI_OECD_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE)
HI_OECD_df_selected <- select(HI_OECD_df, CountryCode, Income.Group, "X.3")
HI_OECD_df_filtered <- filter(Income.Group == "High income: OECD")
HI_OECD_df_filtered <- filter(HI_OECD_df_selected, Income.Group == "High income: OECD")
HI_OECD_df_transformed <- transform(HI_OECD_df_filtered, X.3 = as.numeric(X.3))
View(HI_OECD_df_transformed)
str(HI_OECD_df_transformed)
mean(HI_OECD_df_transformed$X.3)
length(HI_OECD_df_transformed$X.3)
sum(HI_OECD_df_transformed$X.3)
sum(HI_OECD_df_transformed$X.3) / length(HI_OECD_df_transformed$X.3)
HI_OECD-df_grouped <- group_by(HI_OECD_df_transformed, Income.Group)
HI_OECD_df_grouped <- group_by(HI_OECD_df_transformed, Income.Group)
mean(HI_OECD_df_grouped$X.3)
HI_OECD_df_grouped
HI_OECD_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%  ## merge the dataframes
select(CountryCode, Income.Group, "X.3") %>%  ## select only the coutry code, short name and GDP columns
transform(X.3 = as.numeric(X.3)) %>%  ## the GDP column is in character format -> transform to numeric
group_by(Income.Group) %>%
mean(X.3) %>%  ## calculate the mean GDP for those countries
print  ## print the result
GDP_df <- read.csv("./data/getdata_data_GDP.csv", stringsAsFactors=FALSE)
GDP_df$X.3 <- gsub(",", "", GDP_df$X.3)
EDU_df <- read.csv("./data/getdata_data_EDSTATS_Country.csv", stringsAsFactors=FALSE)
colnames(GDP_df)[1] <- "CountryCode"
income_groups_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE)
income_groups_df_selected <- select(income_groups_df, CountryCode, Income.Group, "X.3")
income_groups_df_grouped <- group_by(income_groups_df_selected, Income.Group)
income_groups_df_grouped
mean(income_groups_df_grouped$X.3)
mean(income_groups_df_grouped, X.3)
str()
str(income_groups_df_grouped)
View(income_groups_df_grouped)
income_groups_df %>%  group_by(Income.Group) %>% summarise(mean = mean(X.3), sum = sum(X.3), n = n())
head(income_groups_df_grouped)
income_groups_df_filtered <- filter(income_groups_df_grouped, Income.Group = !is.na(Income.Group))
income_groups_df_filtered <- filter(income_groups_df_grouped, Income.Group == !is.na(Income.Group))
head(income_groups_df_filtered)
View(income_groups_df_grouped)
income_groups_df_filtered <- drop_na(income_groups_df_grouped, Income.Group)
?drop_na
income_groups_df_filtered <- filter(income_groups_df_grouped, Income.Group != NA)
head(income_groups_df_filtered)
View(income_groups_df_grouped)
View(income_groups_df_filtered)
income_groups_df_grouped %>% filter(!is.na(Income.Group))
income_groups_df_filtered <- filter(income_groups_df_grouped, !is.na(Income.Group))
HI_OECD_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%  ## merge the dataframes
select(CountryCode, Income.Group, "X.3") %>%  ## select only the coutry code, short name and GDP columns
transform(X.3 = as.numeric(X.3)) %>%  ## the GDP column is in character format -> transform to numeric
group_by(Income.Group) %>%
filter(!is.na(Income.Group))
mean(X.3) %>%  ## calculate the mean GDP for those countries
print  ## print the result
HI_OECD_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%  ## merge the dataframes
select(CountryCode, Income.Group, "X.3") %>%  ## select only the coutry code, short name and GDP columns
transform(X.3 = as.numeric(X.3)) %>%  ## the GDP column is in character format -> transform to numeric
group_by(Income.Group) %>%
filter(!is.na(Income.Group)) %>%
summarise(mean = mean(X.3)) %>%  ## calculate the mean GDP for those countries
print
HI_OECD_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%  ## merge the dataframes
select(CountryCode, Income.Group, "X.3") %>%  ## select only the coutry code, short name and GDP columns
transform(X.3 = as.numeric(X.3)) %>%  ## the GDP column is in character format -> transform to numeric
group_by(Income.Group) %>%
filter(!is.na(Income.Group, !is.na(X.3))) %>%
summarise(mean = mean(X.3)) %>%  ## calculate the mean GDP for those countries
print
HI_OECD_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%  ## merge the dataframes
select(CountryCode, Income.Group, "X.3") %>%  ## select only the coutry code, short name and GDP columns
transform(X.3 = as.numeric(X.3)) %>%  ## the GDP column is in character format -> transform to numeric
group_by(Income.Group) %>%
filter(!is.na(Income.Group), !is.na(X.3)) %>%
summarise(mean = mean(X.3)) %>%  ## calculate the mean GDP for those countries
print
colnames(GDP_df)[2] <- "Ranking"
HI_OECD_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%  ## merge the dataframes
select(CountryCode, Income.Group, Ranking) %>%  ## select only the coutry code, short name and GDP columns
transform(Ranking = as.numeric(Ranking)) %>%  ## the GDP column is in character format -> transform to numeric
group_by(Income.Group) %>%
filter(!is.na(Income.Group), !is.na(Ranking)) %>%
summarise(mean = mean(Ranking)) %>%  ## calculate the mean GDP for those countries
print  ## print the result
GDP_df <- read.csv("./data/getdata_data_GDP.csv", stringsAsFactors=FALSE)
str(GDP_df)
GDP_df <- read.csv("./data/getdata_data_GDP.csv", stringsAsFactors=FALSE)  ## read in the GDP dataframe
EDU_df <- read.csv("./data/getdata_data_EDSTATS_Country.csv", stringsAsFactors=FALSE)  ## read in the education dataframe
colnames(GDP_df)[1] <- "CountryCode"  ## change column name so common columns have same name to allow merging
colnames(GDP_df)[2] <- "Ranking" ## change the column name "Gross.domestic.product.2012" to something more manageable
average_ranking <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%  ## merge the dataframes
select(Income.Group, Ranking) %>%  ## select only the coutry code, Income.Group and GDP ranking columns
transform(Ranking = as.numeric(Ranking)) %>%  ## the GDP ranking column is in character format -> transform to numeric
group_by(Income.Group) %>%  ## group the dataframe by Income.Group
filter(!is.na(Income.Group), !is.na(Ranking)) %>%  ## filter out the NA values
summarise(mean = mean(Ranking)) %>%  ## calculate the mean GDP ranking for the grouped countries
print  ## print the result
nums <- c(2,4,5,7,9)
mean(nums)
nums <- c(2,4,5,7,9, 11, 13)
mean(nums)
mean(nums, 2)
?mean
mean(nums, nsmall = 2)
round(mean(nums, 2))
round(mean(nums, 2, nsmall = 2))
format(round(mean(nums, 2)))
format(round(mean(nums, 2, nsmall = 2)))
sprintf(mean(nums), fmt = '%#.2f')
GDP_df <- read.csv("./data/getdata_data_GDP.csv", stringsAsFactors=FALSE)  ## read in the GDP dataframe
EDU_df <- read.csv("./data/getdata_data_EDSTATS_Country.csv", stringsAsFactors=FALSE)  ## read in the education dataframe
colnames(GDP_df)[1] <- "CountryCode"  ## change column name so common columns have same name to allow merging
colnames(GDP_df)[2] <- "Ranking" ## change the column name "Gross.domestic.product.2012" to something more manageable
average_ranking <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%  ## merge the dataframes
select(Income.Group, Ranking) %>%  ## select only the coutry code, Income.Group and GDP ranking columns
transform(Ranking = as.numeric(Ranking)) %>%  ## the GDP ranking column is in character format -> transform to numeric
group_by(Income.Group) %>%  ## group the dataframe by Income.Group
filter(!is.na(Income.Group), !is.na(Ranking)) %>%  ## filter out the NA values
summarise(mean = sprintf(mean(Ranking), fmt = '%#.6f')) %>%  ## calculate the mean GDP ranking for the grouped countries
print  ## print the result
GDP_df <- read.csv("./data/getdata_data_GDP.csv", stringsAsFactors=FALSE)  ## read in the GDP dataframe
EDU_df <- read.csv("./data/getdata_data_EDSTATS_Country.csv", stringsAsFactors=FALSE)  ## read in the education dataframe
colnames(GDP_df)[1] <- "CountryCode"  ## change column name so common columns have same name to allow merging
colnames(GDP_df)[2] <- "Ranking" ## change the column name "Gross.domestic.product.2012" to something more manageable
ranking_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE)
ranking_df_selected <- select(ranking_df, Income.Group, Ranking)
ranking_df_transformed <- transform(ranking_df_selected, Ranking = as.numeric(Ranking))
ranking_df_filtered <- filter(ranking_df_transformed, Ranking <= 38, Income.Group == "Lower middle income")
length(ranking_df_filtered)
ranking_df_filtered
dim(ranking_df_filtered)
GDP_df <- read.csv("./data/getdata_data_GDP.csv", stringsAsFactors=FALSE)  ## read in the GDP dataframe
EDU_df <- read.csv("./data/getdata_data_EDSTATS_Country.csv", stringsAsFactors=FALSE)  ## read in the education dataframe
colnames(GDP_df)[1] <- "CountryCode"  ## change column name so common columns have same name to allow merging
colnames(GDP_df)[2] <- "Ranking" ## change the column name "Gross.domestic.product.2012" to something more manageable
ranking_quantiles <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%  ## merge the dataframes
select(Income.Group, Ranking) %>%  ## select only the coutry code, Income.Group and GDP ranking columns
transform(Ranking = as.numeric(Ranking)) %>%  ## the GDP ranking column is in character format -> transform to numeric
select(Short.Name, Ranking, Income.Group) %>%  ## group the dataframe by Income.Group
filter(Ranking <=38, Income.Group == "Lower middle income") %>%  ## filter out the NA values
print  ## print the result
ranking_df <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%  ## merge the dataframes
select(Short.Name, Ranking, Income.Group) %>%  ## select only the coutry code, Income.Group and GDP ranking columns
transform(Ranking = as.numeric(Ranking)) %>%  ## the GDP ranking column is in character format -> transform to numeric
filter(Ranking <=38, Income.Group == "Lower middle income") %>%  ## filter out the NA values
print  ## print the result
GDP_df <- read.csv("./data/getdata_data_GDP.csv", stringsAsFactors=FALSE)  ## read in the GDP dataframe
GDP_df$X.3 <- gsub(",", "", GDP_df$X.3) ## remove commas in the GDP column to facilitate character conversion
EDU_df <- read.csv("./data/getdata_data_EDSTATS_Country.csv", stringsAsFactors=FALSE)  ## read in the education dataframe
colnames(GDP_df)[1] <- "CountryCode"  ## change column name so common columns have same name to allow merging
GDP_vec <- GDP_df$CountryCode  ## create a vector from the CountryCode column in GDP dataframe
EDU_vec <- EDU_df$CountryCode  ## create a vector from the CountryCode column in education dataframe
matches <- match(GDP_vec, EDU_vec)  ## create a vector of all of the matches between the two vectors
length(matches)  ## the length of the vector equals the number of matches
countries_GDP <- merge(x = GDP_df, y = EDU_df, by = "CountryCode", all = TRUE) %>%  ## merge the dataframes
select(CountryCode, Short.Name, "X.3") %>%  ## select only the coutry code, short name and GDP columns
transform(X.3 = as.numeric(X.3)) %>%  ## the GDP column is in character format -> transform to numeric
arrange(X.3)  ## sort by GDP ascending (by default)
head(countries_GDP, 20)  ### print first twenty rows and read the country at row 13
matches
matches_clean <- !is.na(matches)
length(matches_clean)  ## the length of the vector equals the number of matches
matches_clean <- matches[!is.na(matches)]
length(matches_clean)  ## the length of the vector equals the number of matches
matches_clean
result <- GDP_vec %in% EDU_vec
length(result)
length(result[TRUE])
result
sum(result)
GDP_df <- read.csv("./data/getdata_data_GDP.csv", stringsAsFactors=FALSE)  ## read in the GDP dataframe
GDP_df$X.3 <- gsub(",", "", GDP_df$X.3) ## remove commas in the GDP column to facilitate character conversion
EDU_df <- read.csv("./data/getdata_data_EDSTATS_Country.csv", stringsAsFactors=FALSE)  ## read in the education dataframe
colnames(GDP_df)[1] <- "CountryCode"  ## change column name so common columns have same name to allow merging
GDP_vec <- GDP_df$CountryCode  ## create a vector from the CountryCode column in GDP dataframe
EDU_vec <- EDU_df$CountryCode  ## create a vector from the CountryCode column in education dataframe
matches <- match(GDP_vec, EDU_vec)  ## create a vector of all of the matches between the two vectors
matches_clean <- matches[!is.na(matches)]
length(matches_clean)  ## the length of the vector equals the number of matches
UScomms_df <- (read.csv("./data/getdata_data_ss06hid.csv"))
agriculturalLogical <- UScomms_df$ACR == 3 & UScomms_df$AGS == 6
which(agriculturalLogical == TRUE)
GDP_vec
EDU_vec
sort(matches_clean)
GDP_vec <- !is.na(GDP_df$CountryCode)  ## create a vector from the CountryCode column in GDP dataframe
GDP_vec <- GDP_df$CountryCode  ## create a vector from the CountryCode column in GDP dataframe
GDP_vec
stri_remove_empty(GDP_vec)
stri_omit_na(GDP_vec)
GDP_vec[GDP_vec != ""]
GDP_vec <- GDP_df$CountryCode  ## create a vector from the CountryCode column in GDP dataframe
GDP_vec_clean <- GDP_vec[GDP_vec != ""]  ## remove the "" values in the vector
EDU_vec <- EDU_df$CountryCode  ## create a vector from the CountryCode column in education dataframe
matches <- match(GDP_vec_clean, EDU_vec)  ## create a vector of all of the matches between the two vectors
matches_clean <- matches[!is.na(matches)]
length(matches_clean)  ## the length of the vector equals the number of matches
matches_clean
sort(matches_clean)
